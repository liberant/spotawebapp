'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ReduxFormFields = require('../../components/ReduxFormFields');

var _reduxForm = require('redux-form');

var _reduxFormMaterialUi = require('redux-form-material-ui');

var _muiThemeable = require('material-ui/styles/muiThemeable');

var _muiThemeable2 = _interopRequireDefault(_muiThemeable);

var _FontIcon = require('material-ui/FontIcon');

var _FontIcon2 = _interopRequireDefault(_FontIcon);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _dateTime = require('../../utils/dateTime');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TimeField = function (_Component) {
  _inherits(TimeField, _Component);

  function TimeField(props) {
    _classCallCheck(this, TimeField);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.handleTimePickerChange = function (e, newVal) {
      var _this$props = _this.props,
          change = _this$props.change,
          name = _this$props.name,
          formatOptions = _this$props.formatOptions;


      if (newVal !== null) {

        _this.setState({
          value: new Date(newVal).toLocaleString('de-DE', formatOptions)
        });
        change(name, new Date(newVal).toISOString());
      }
    };

    _this.handleTimeTextBlur = function (state, e) {
      var _this$props2 = _this.props,
          change = _this$props2.change,
          input = _this$props2.input,
          formatOptions = _this$props2.formatOptions;
      var name = input.name;


      var newVal = _this.state.value;

      if (!newVal) {
        return;
      }

      _this.setState({ value: (0, _dateTime.formatTimeToString)(newVal, formatOptions) });
      change(name, (0, _dateTime.formatTimeToObject)(newVal, formatOptions).toISOString());
    };

    _this.handleTimeTextChange = function (evt) {
      _this.setState({ value: evt.target.value });
    };

    _this.state = {
      value: ''
    };
    return _this;
  }

  TimeField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var formatOptions = this.props.formatOptions;


    if (nextProps !== undefined) {
      var input = nextProps.input;
      var value = input.value;


      if (value !== undefined && value !== null && value.length > 0) {
        this.setState({ value: new Date(value).toLocaleString('de-DE', formatOptions) });
      }
    }
  };

  TimeField.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        muiTheme = _props.muiTheme,
        input = _props.input,
        floatingLabelText = _props.floatingLabelText,
        timePickerText = _props.timePickerText,
        disabled = _props.disabled;
    var name = input.name;


    return _react2.default.createElement(
      'div',
      { style: { display: 'flex', alignItems: 'flex-end' } },
      _react2.default.createElement(_reduxFormMaterialUi.TextField, {
        name: name + 'Text',
        value: this.state.value,
        onBlur: this.handleTimeTextBlur,
        onChange: this.handleTimeTextChange,
        disabled: disabled,
        floatingLabelText: floatingLabelText,
        style: { width: 50, alignItems: 'center' },
        ref: name + 'Text'
      }),
      _react2.default.createElement(_reduxForm.Field, {
        name: name,
        textFieldStyle: { display: 'none' },
        autoOk: true,
        tabIndex: -1,
        minutesStep: 5,
        onChange: this.handleTimePickerChange,
        disabled: disabled,
        component: _ReduxFormFields.TimePicker,
        floatingLabelText: '',
        ref: name,
        withRef: true
      }),
      _react2.default.createElement(
        _IconButton2.default,
        {
          onClick: function onClick() {
            _this2.refs[name].getRenderedComponent().refs.component.openDialog();
          },
          tabIndex: -1,
          disabled: disabled,
          tooltip: timePickerText },
        _react2.default.createElement(
          _FontIcon2.default,
          {
            className: 'material-icons',
            style: { fontSize: 12 },
            color: muiTheme.palette.primary1Color },
          'access_time'
        )
      )
    );
  };

  return TimeField;
}(_react.Component);

TimeField.propTypes = process.env.NODE_ENV !== "production" ? {
  disabled: _propTypes2.default.bool.isRequired,
  input: _propTypes2.default.object.isRequired,
  floatingLabelText: _propTypes2.default.string.isRequired,
  timePickerText: _propTypes2.default.string.isRequired,
  muiTheme: _propTypes2.default.object.isRequired
} : {};

exports.default = (0, _muiThemeable2.default)()((0, _reactIntl.injectIntl)(TimeField));
module.exports = exports['default'];