'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactIntl = require('react-intl');

var _reduxForm = require('redux-form');

var _reduxFormMaterialUi = require('redux-form-material-ui');

var _FontIcon = require('material-ui/FontIcon');

var _FontIcon2 = _interopRequireDefault(_FontIcon);

var _ImageCropDialog = require('../../containers/ImageCropDialog');

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _ReduxFormFields = require('../ReduxFormFields');

var _withAppConfigs = require('../../withAppConfigs');

var _withAppConfigs2 = _interopRequireDefault(_withAppConfigs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MyAccountForm = function (_Component) {
  _inherits(MyAccountForm, _Component);

  function MyAccountForm() {
    _classCallCheck(this, MyAccountForm);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  MyAccountForm.prototype.render = function render() {
    var _props = this.props,
        handleSubmit = _props.handleSubmit,
        intl = _props.intl,
        initialized = _props.initialized,
        setSimpleValue = _props.setSimpleValue,
        new_company_photo = _props.new_company_photo,
        auth = _props.auth,
        muiTheme = _props.muiTheme,
        isLinkedWithProvider = _props.isLinkedWithProvider,
        linkUserWithPopup = _props.linkUserWithPopup,
        getProviderIcon = _props.getProviderIcon,
        handleEmailVerificationsSend = _props.handleEmailVerificationsSend,
        appConfig = _props.appConfig,
        handlePhotoUploadSuccess = _props.handlePhotoUploadSuccess;


    var uid = auth.uid;
    var showPasswords = isLinkedWithProvider('password');

    return _react2.default.createElement(
      'form',
      { onSubmit: handleSubmit, style: {
          height: '100%',
          alignItems: 'strech',
          display: 'flex',
          flexWrap: 'wrap',
          justifyContent: 'center'
        } },
      _react2.default.createElement(
        'div',
        { style: { margin: 15, display: 'flex', flexDirection: 'column', alignItems: 'center' } },
        _react2.default.createElement(_ReduxFormFields.AvatarImageField, {
          disabled: !initialized,
          uid: uid,
          change: this.props.change,
          initialized: initialized,
          intl: intl,
          path: 'users' }),
        _react2.default.createElement(
          'div',
          null,
          appConfig.firebase_providers.map(function (p, i) {
            if (p !== 'email' && p !== 'password' && p !== 'phone') {
              return _react2.default.createElement(
                _IconButton2.default,
                {
                  key: i,
                  disabled: isLinkedWithProvider(p),
                  onClick: function onClick() {
                    linkUserWithPopup(p);
                  },
                  tooltip: intl.formatMessage({ id: 'link_with_' + p }) },
                getProviderIcon(p)
              );
            } else {
              return _react2.default.createElement('div', { key: i });
            }
          })
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_reduxForm.Field, {
            name: 'displayName',
            disabled: !initialized,
            component: _reduxFormMaterialUi.TextField,
            fullWidth: true,
            hintText: intl.formatMessage({ id: 'name_hint' }),
            floatingLabelText: intl.formatMessage({ id: 'name_label' }),
            ref: 'displayName',
            withRef: true
          })
        ),
        _react2.default.createElement(
          'div',
          { style: { display: 'flex', alignItems: 'flex-end', flexWrap: 'wrap' } },
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_reduxForm.Field, {
              name: 'email',
              disabled: !initialized,
              component: _reduxFormMaterialUi.TextField,
              hintText: intl.formatMessage({ id: 'email' }),
              floatingLabelText: intl.formatMessage({ id: 'email' }),
              ref: 'email',
              withRef: true
            })
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              _IconButton2.default,
              {
                onClick: auth.emailVerified === true ? undefined : handleEmailVerificationsSend,
                tooltip: intl.formatMessage({ id: auth.emailVerified === true ? 'email_verified' : 'email_not_verified' }) },
              _react2.default.createElement(
                _FontIcon2.default,
                {
                  color: auth.emailVerified === true ? muiTheme.palette.primary1Color : muiTheme.palette.accent1Color,
                  style: { 'paddingLeft': 10 },
                  className: 'material-icons' },
                auth.emailVerified === true ? 'verified_user' : 'error'
              )
            )
          )
        ),
        showPasswords && _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_reduxForm.Field, {
              name: 'old_password',
              disabled: !initialized,
              type: 'Password',
              component: _reduxFormMaterialUi.TextField,
              fullWidth: true,
              hintText: intl.formatMessage({ id: 'password' }),
              floatingLabelText: intl.formatMessage({ id: 'password' }),
              ref: 'old_password',
              withRef: true
            })
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_reduxForm.Field, {
              name: 'new_password',
              disabled: !initialized,
              type: 'Password',
              component: _reduxFormMaterialUi.TextField,
              fullWidth: true,
              hintText: intl.formatMessage({ id: 'password' }),
              floatingLabelText: intl.formatMessage({ id: 'new_password' }),
              ref: 'new_password',
              withRef: true
            })
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_reduxForm.Field, {
              name: 'new_password_confirmation',
              disabled: !initialized,
              type: 'Password',
              component: _reduxFormMaterialUi.TextField,
              fullWidth: true,
              hintText: intl.formatMessage({ id: 'confirm_password' }),
              floatingLabelText: intl.formatMessage({ id: 'confirm_password' }),
              ref: 'new_password_confirmation',
              withRef: true
            })
          )
        )
      ),
      _react2.default.createElement(_ImageCropDialog.ImageCropDialog, {
        path: 'users/' + uid,
        fileName: 'photoURL',
        onUploadSuccess: function onUploadSuccess(s) {
          handlePhotoUploadSuccess(s);
        },
        open: new_company_photo !== undefined,
        src: new_company_photo,
        handleClose: function handleClose() {
          setSimpleValue('new_company_photo', undefined);
        },
        title: intl.formatMessage({ id: 'change_photo' })
      })
    );
  };

  return MyAccountForm;
}(_react.Component);

MyAccountForm.propTypes = process.env.NODE_ENV !== "production" ? {
  getProviderIcon: _propTypes2.default.func.isRequired,
  handleEmailVerificationsSend: _propTypes2.default.func.isRequired,
  handlePhotoUploadSuccess: _propTypes2.default.func.isRequired,
  handleUserDeletion: _propTypes2.default.func.isRequired,
  handleSubmit: _propTypes2.default.func.isRequired,
  initialized: _propTypes2.default.bool.isRequired,
  setSimpleValue: _propTypes2.default.func.isRequired,
  muiTheme: _propTypes2.default.object.isRequired,
  isLinkedWithProvider: _propTypes2.default.func.isRequired,
  linkUserWithPopup: _propTypes2.default.func.isRequired,
  intl: _reactIntl.intlShape.isRequired,
  auth: _propTypes2.default.object.isRequired
} : {};

exports.default = (0, _reduxForm.reduxForm)({ form: 'my_account' })((0, _withAppConfigs2.default)(MyAccountForm));
module.exports = exports['default'];