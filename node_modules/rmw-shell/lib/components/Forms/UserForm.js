'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactIntl = require('react-intl');

var _reduxForm = require('redux-form');

var _reduxFormMaterialUi = require('redux-form-material-ui');

var _ReduxFormFields = require('../ReduxFormFields');

var _Toggle = require('material-ui/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UserForm = function (_Component) {
  _inherits(UserForm, _Component);

  function UserForm() {
    _classCallCheck(this, UserForm);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  UserForm.prototype.render = function render() {
    var _props = this.props,
        handleSubmit = _props.handleSubmit,
        intl = _props.intl,
        initialized = _props.initialized,
        uid = _props.uid,
        handleAdminChange = _props.handleAdminChange,
        isAdmin = _props.isAdmin;


    return _react2.default.createElement(
      'form',
      { onSubmit: handleSubmit, style: {
          height: '100%',
          alignItems: 'stretch',
          display: 'flex',
          flexWrap: 'wrap',
          justifyContent: 'flex-start'
        } },
      _react2.default.createElement('button', { type: 'submit', style: { display: 'none' } }),
      _react2.default.createElement(
        'div',
        { style: { marginLeft: -10 } },
        _react2.default.createElement(_ReduxFormFields.AvatarImageField, {
          disabled: true,
          uid: uid,
          change: this.props.change,
          initialized: initialized,
          intl: intl,
          path: 'users'
        })
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_reduxForm.Field, {
            name: 'displayName',
            disabled: true,
            component: _reduxFormMaterialUi.TextField,
            hintText: intl.formatMessage({ id: 'name_hint' }),
            floatingLabelText: intl.formatMessage({ id: 'name_label' }),
            ref: 'displayName',
            withRef: true
          })
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_reduxForm.Field, {
            name: 'email',
            disabled: true,
            component: _reduxFormMaterialUi.TextField,
            hintText: intl.formatMessage({ id: 'email_hint' }),
            floatingLabelText: intl.formatMessage({ id: 'email_label' }),
            ref: 'email',
            withRef: true
          })
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_Toggle2.default, {
            label: intl.formatMessage({ id: 'is_admin_label' }),
            toggled: isAdmin,
            onToggle: handleAdminChange
          })
        )
      )
    );
  };

  return UserForm;
}(_react.Component);

UserForm.propTypes = process.env.NODE_ENV !== "production" ? {
  handleSubmit: _propTypes2.default.func.isRequired,
  handleAdminChange: _propTypes2.default.func.isRequired,
  isAdmin: _propTypes2.default.bool.isRequired,
  intl: _reactIntl.intlShape.isRequired,
  initialized: _propTypes2.default.bool.isRequired,
  setDialogIsOpen: _propTypes2.default.any.isRequired,
  uid: _propTypes2.default.string.isRequired
} : {};

exports.default = (0, _reduxForm.reduxForm)({ form: 'user' })(UserForm);
module.exports = exports['default'];