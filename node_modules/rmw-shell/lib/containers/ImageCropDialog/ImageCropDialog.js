'use strict';

exports.__esModule = true;
exports.ImageCropDialog = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactIntl = require('react-intl');

var _firebase = require('firebase');

var _firebase2 = _interopRequireDefault(_firebase);

var _reactImageCropper = require('react-image-cropper');

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _firekitProvider = require('firekit-provider');

var _CircularProgress = require('material-ui/CircularProgress');

var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

var _LinearProgress = require('material-ui/LinearProgress');

var _LinearProgress2 = _interopRequireDefault(_LinearProgress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  container: {
    display: 'flex',
    alignItems: 'stretch',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  dialog: {
    width: '100%',
    maxWidth: 'none'
  },
  cropper: {
    height: 250,
    width: 250
  }
};

var ImageCropDialog = exports.ImageCropDialog = function (_Component) {
  _inherits(ImageCropDialog, _Component);

  function ImageCropDialog(props) {
    _classCallCheck(this, ImageCropDialog);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.handlePhotoURLUpload = function (photo_url) {
      var _this$props = _this.props,
          path = _this$props.path,
          fileName = _this$props.fileName,
          onUploadSuccess = _this$props.onUploadSuccess,
          firebaseApp = _this$props.firebaseApp;


      _this.setState({ isUploading: true, uploadProgress: 0 });

      var uploadTask = firebaseApp.storage().ref(path + '/' + fileName).putString(photo_url, 'data_url');

      uploadTask.on(_firebase2.default.storage.TaskEvent.STATE_CHANGED, function (snapshot) {
        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;
        _this.setState({ isUploading: true, uploadProgress: progress });
      }, function (error) {
        console.log(error);
      }, function () {
        _this.setState({ isUploading: false, uploadProgress: 100 }, function () {
          onUploadSuccess(uploadTask.snapshot);
        });
      });
    };

    _this.handlePhotoULRChange = function (e) {
      e.preventDefault();

      _this.setState({ isLoading: true });

      var files = void 0;
      if (e.dataTransfer) {
        files = e.dataTransfer.files;
      } else if (e.target) {
        files = e.target.files;
      }
      var reader = new FileReader();
      reader.onload = function () {
        _this.setState({ src: reader.result, isLoading: false, file: files[0] });
      };
      reader.readAsDataURL(files[0]);
    };

    _this.handleClose = function () {
      var handleClose = _this.props.handleClose;

      _this.setState({ src: undefined });
      handleClose();
    };

    _this.cropper = null;
    _this.state = {
      src: undefined,
      isLoading: false,
      isUploading: false,
      uploadProgress: 0
    };
    return _this;
  }

  ImageCropDialog.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        intl = _props.intl,
        open = _props.open,
        title = _props.title;


    var actions = [_react2.default.createElement(_FlatButton2.default, {
      disabled: !this.state.src || this.state.isLoading || this.state.isUploading,
      label: intl.formatMessage({ id: 'submit' }),
      primary: true,
      onClick: function onClick() {
        _this2.handlePhotoURLUpload(_this2.cropper.crop());
      }
    }), _react2.default.createElement(_FlatButton2.default, {
      label: intl.formatMessage({ id: 'cancel' }),
      secondary: true,
      onClick: this.handleClose
    })];

    return _react2.default.createElement(
      _Dialog2.default,
      {
        contentStyle: styles.dialog,
        title: title,
        actions: actions,
        onRequestClose: this.handleClose,
        open: open },
      _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.cropper },
          (!this.state.src || this.state.isLoading) && _react2.default.createElement('input', {
            ref: function ref(field) {
              if (field !== null) {
                field.click();
              }
            },
            type: 'file',
            accept: 'image/*'
            //style={{visibility:'hidden'}}
            , onChange: this.handlePhotoULRChange
          }),
          this.state.isLoading && _react2.default.createElement(_CircularProgress2.default, { size: 80, thickness: 5 }),
          this.state.isUploading && _react2.default.createElement(_LinearProgress2.default, { mode: 'determinate', value: this.state.uploadProgress }),
          this.state.src && _react2.default.createElement(_reactImageCropper.Cropper, {
            ref: function ref(field) {
              _this2.cropper = field;
            },
            src: this.state ? this.state.src : undefined,
            aspectRatio: 9 / 9
          })
        )
      )
    );
  };

  return ImageCropDialog;
}(_react.Component);

ImageCropDialog.propTypes = process.env.NODE_ENV !== "production" ? {
  intl: _reactIntl.intlShape.isRequired,
  open: _propTypes2.default.bool.isRequired,
  title: _propTypes2.default.string,
  path: _propTypes2.default.string.isRequired,
  fileName: _propTypes2.default.string.isRequired,
  onUploadSuccess: _propTypes2.default.func.isRequired,
  handleClose: _propTypes2.default.func.isRequired
} : {};

var mapStateToProps = function mapStateToProps(state) {
  var auth = state.auth;

  return {
    auth: auth
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps)((0, _reactIntl.injectIntl)((0, _firekitProvider.withFirebase)(ImageCropDialog)));